<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/acmicpc/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2020-08-19T20:05:20+09:00</updated>
  <id>http://localhost:4000/tag/acmicpc/feed.xml</id>

  
  
  

  
    <title type="html">To Be Programmer | </title>
  

  
    <subtitle>프로그래머가 되기 위한 나의 노력</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">5419번 북서풍 - Platinum 4</title>
      <link href="http://localhost:4000/acmicpc-Num_5419" rel="alternate" type="text/html" title="5419번 북서풍 - Platinum 4" />
      <published>2020-06-16T04:14:00+09:00</published>
      <updated>2020-06-16T04:14:00+09:00</updated>
      <id>http://localhost:4000/acmicpc-Num_5419</id>
      <content type="html" xml:base="http://localhost:4000/acmicpc-Num_5419">&lt;h2 id=&quot;북서풍-5419번&quot;&gt;북서풍 5419번&lt;/h2&gt;

&lt;p&gt;’’’
시간 제한
‘’’&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;1초&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;’’’
메모리 제한
‘’’&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;256MB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;’’’
Problem
‘’’&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;강한 북서풍이 불고 있다. 이 뜻은 동쪽과 남쪽 사이의 모든 방향으로 항해할 수 있다는 뜻이다. &lt;strong&gt;북쪽이나 서쪽으로 항해하는 것은 불가능하다.&lt;/strong&gt;
작은 섬이 여러 개 있는 바다가 있다. 섬은 좌표 평면의 한 점으로 나타낼 수 있다. y 좌표가 증가하는 방향은 북쪽, x좌표가 증가하는 방향은 동쪽이다. 북서풍을 타고 항해할 수 있는 섬의 쌍의 수를 구하는 프로그램을 작성하시오.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;’’’
Input
‘’’&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;첫째 줄에 테스트 케이스의 개수가 주어진다.
각 테스트 케이스의 첫째 줄에는 섬의 수 n (1 ≤ n ≤ 75000)이 주어진다. 다음 n개 줄에는 각 섬의 좌표 x_i, y_i가 주어진다. 두 섬의 좌표가 같은 경우는 없다. (-10^9 ≤ x_i, y_i ≤ 10^9)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;’’’
Output
‘’’&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;각 테스트 케이스에 대해서, 북서풍을 타고 항해할 수 있는 섬의 쌍의 수를 출력한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가장 먼저 생각했던 것은 항해는 동쪽과 남쪽으로만 항해가 가능하므로, x의 크기는 증가, y의 크기는 감소해야 한다고 생각했다.&lt;/p&gt;

&lt;p&gt;그런데 x,y의 좌표가 -10^9 ~ 10^9까지 가능하므로 x,y의 값을 전부 좌표로 표현한다음에 세그먼트 트리 기법이나 브루트 포스 기법은 메모리 초과 및 시간 초과가 분명했다.&lt;/p&gt;

&lt;p&gt;그래서 입력받은 섬의 x, y 좌표 값을 x좌표를 기준으로 정렬한 다음에, y좌표를 좌표압축 기법을 사용해 상대적인 값으로 나타내고 이를 이용해서 세그먼트 트리 기법을 이용하기로 했다.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;cstring&amp;gt;
#define MAX_N 100000

using namespace std;

pair&amp;lt;int, int&amp;gt; home[MAX_N + 1];
int n;
int total;
long long s, d;
int x, y;
int segment[4 * MAX_N]; // y의 좌표를 세그먼트 트리의 인덱스로 만듬
int y_index[MAX_N];

bool cmp(pair&amp;lt;int, int&amp;gt; x, pair&amp;lt;int, int&amp;gt; y) {
	if (x.first == y.first) {
		return x.second &amp;gt; y.second;
	}

	return x.first &amp;lt; y.first;
}

int update(int pos, int val, int node, int x, int y) { // x ~ y 인덱스까지의 세그먼트 트리 인덱스값 업데이트

	if (y &amp;lt; pos || pos &amp;lt; x) { // 범위를 벗어났을 경우, 노드 값 그대로 반환
		return segment[node];
	}

	if (x == y) { // 리프 노드인 경우, 해당 세그먼트 값 업데이트
		return segment[node] = val;
	}

	int mid = (x + y) &amp;gt;&amp;gt; 1; // 자식 tree size 정의 (산술시프트 이용)

	return segment[node] = update(pos, val, node * 2, x, mid) + update(pos, val, node * 2 + 1, mid + 1, y); // 왼쪽 자식 트리 업데이트 값 + 오른쪽 자식 트리 업데이트 값
	// 왼쪽 자식의 경우, 인덱스는 부모 인덱스 * 2, x는 부모 x값, y는 mid값
    // 오른쪽 자식의 경우, 인덱스는 부모 인데스 * 2 + 1, x값은 mid+1, y는 부모 y값
}

int query(int from, int to, int node, int x, int y) { //  x ~ y 인덱스까지의 노드 쿼리, from ~ to 까지의 인덱스 검색

	if (y &amp;lt; from || to &amp;lt; x) { // x ~ y가 찾으려는 범위를 벗어났으면 0 반환
		return 0;
	}

	if (from &amp;lt;= x &amp;amp;&amp;amp; y &amp;lt;= to) { // x ~ y가 찾으려는 범위 내면 세그먼트에 저장된 값 반환
		return segment[node];
	}

	int mid = (x + y) &amp;gt;&amp;gt; 1; // 자식 tree size 정의 (산술시프트 이용)

	return query(from, to, node * 2, x, mid) + query(from, to, node * 2 + 1, mid + 1, y); // 왼쪽 자식 쿼리 + 오른쪽 자식 쿼리
	// 왼쪽 자식의 경우, 인덱스는 부모 인덱스 * 2, x는 부모 x값, y는 mid값
	// 오른쪽 자식의 경우, 인덱스는 부모 인덱스 * 2 + 1, x값은 mid+1, y는 부모 y값
}


int main(void) {

	scanf(&amp;quot;%d&amp;quot;, &amp;amp;total);

	for (int i = 0; i &amp;lt; total; i++) {

		memset(segment, 0, sizeof(segment));
		memset(y_index, 0, sizeof(y_index));

		long long cnt = 0;

		scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);

		vector&amp;lt;int&amp;gt; ypos;

		for (int j = 0; j &amp;lt; n; j++) {
			scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;s, &amp;amp;d);
			home[j] = { s,d };
			ypos.push_back(d);
		}

		sort(home, home + n, cmp);
		sort(ypos.begin(), ypos.end());
		ypos.erase(unique(ypos.begin(), ypos.end()), ypos.end()); // 좌표 압축을 위한 중복 값 제거


		for (int j = 0; j &amp;lt; n; j++) {
			int invert_y = lower_bound(ypos.begin(), ypos.end(), home[j].second) - ypos.begin(); // z는 지금 위치한 섬의 y좌표 압축 결과 인덱스
			cnt += (long long) query(invert_y, n - 1, 1, 0, n - 1); // 쿼리는 지금 위치한 섬으로 올 수 있는 섬들의 갯수를 반환 ---! n-1이 아니라 invert_y가 가질 수 있는 최대 값을 넣어도 가능 !---
			y_index[invert_y]++; // 압축한 y 인덱스 해당 좌표의 섬 갯수 증가
			update(invert_y, y_index[invert_y], 1, 0, n - 1); // 세그먼트 트리 값 업데이트
		}

		printf(&amp;quot;%lld\n&amp;quot;, cnt);

	}

	return 0;

}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/Thirdsense3/3c8502d1cbaa0ff4bc0ad1705fe9dc2e.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>Seokhyun Myung</name>
        
        
      </author>

      

      
        <category term="acmicpc" />
      

      
        <summary type="html">북서풍 5419번</summary>
      

      
      
    </entry>
  
</feed>
