<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/data-structure/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2020-08-19T18:05:52+09:00</updated>
  <id>http://localhost:4000/tag/data-structure/feed.xml</id>

  
  
  

  
    <title type="html">To Be Programmer | </title>
  

  
    <subtitle>프로그래머가 되기 위한 나의 노력</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Data_Structure</title>
      <link href="http://localhost:4000/Data_Structure-control-statement" rel="alternate" type="text/html" title="Data_Structure" />
      <published>2020-08-18T04:00:00+09:00</published>
      <updated>2020-08-18T04:00:00+09:00</updated>
      <id>http://localhost:4000/Data_Structure-control-statement</id>
      <content type="html" xml:base="http://localhost:4000/Data_Structure-control-statement">&lt;p&gt;자료구조란 무엇인가(Data Structure)&lt;/p&gt;

&lt;p&gt;사전적인 의미는 자료(Data)의 집합의 의미하며, 각 원소들이 논리적으로 정의된 규칙에 의해 나열되며 자료에 대한 처리를 효율적으로 수행할 수 있도록 자료를 구분하여 표현한 것&lt;/p&gt;

&lt;p&gt;자료구조의 선택 기준&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자료의 처리 시간&lt;/li&gt;
  &lt;li&gt;자료의 크기&lt;/li&gt;
  &lt;li&gt;자료의 활용 빈도&lt;/li&gt;
  &lt;li&gt;자료의 갱신 정도&lt;/li&gt;
  &lt;li&gt;프로그램의 용이성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자료의 처리를 보다 효율적으로 하기 위해서 위와 같은 사항을 고려하여 선택, 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;자료구조의 특징&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;효율성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;앞서 설명 했듯이 자료구조를 사용하는 목적은 효율적인 데이터의 관리 및 사용입니다. 따라서 적절한 자료구조를 선택하여 사용한다면 업무의 효율이 올라갈 것입니다. 한가지 예를 들어보자면 검색에 대한 알고리즘을 구현할때, 데이터의 양이 많다면 순차 검색(Linear Search)를 사용하는 것 보다 이분 검색(Binary Search)를 활용하는것이 더 효율 적일 것입니다. 왜냐하면 학생이라는 테이블에 학생에 대한 데이터가 100만개 있다고 할때, 순차 검색으로 데이터를 검색하게 되면 운이 좋을때는 1번의 연산으로 찾을 수 있겠지만, 운이 없을경우에는 100만번의연산을 거쳐야 할 것입니다. 이에 반해 이분 검색은 연산의 횟수가 훨씬 줄어들죠. 이와같이 목적에 맞는 자료구조를 사용하는것이 효율적입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;추상화&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;추상화란 복잡한 자료, 모듈, 시스템 등으로 부터 핵심적인 개념만 간추려 내는 것입니다. 자료구조를 구현할 때 중요한 것은 어느 시점에 데이터를 삽입할 것이며, 어느 시점에 이러한 데이터를 어떻게 사용할것인지에 대해서 초점을 맞출수 있기 때문에 구현 외적인 부분에 더 시간을 쏟을 수 있습니다. 알고리즘 자체에는 중점을 두지 않습니다.&lt;/p&gt;

&lt;p&gt;마찬가지로 자료구조 내부의 구현은 중요하지 않습니다. 어떻게 구현했는지 보다 어떻게 사용해야 하는지를 알고 있어야 합니다.&lt;/p&gt;

&lt;p&gt;예를들어 스택(Stack)의 경우 먼저 들어간것이 나중에 나오는 FILO(First In Last Out)의 형태를 가지고 있습니다. 그리고 push() 함수를 이용해서 데이터를 삽입할 수 있고, pop() 함수를 이용해서 데이터를 추출할 수 있습니다. 그 함수 내부 구현이 어떻게 되었는지는 중요하지 않습니다. 사람마다 다른 코드를 작성할 것이고, 사용 언어, 개발 툴등 환경적인 변수에 의해서 다른 코드가 나올 것이기 때문에 추상적인 개념에 대해서만 이해하고 있다면 사용할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;재사용성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자료구조를 설계할때 특정 프로그램에서만 동작하게 설계하지는 않습니다. 다양한 프로그램에서 동작할 수 있도록 범용성 있게 설계하기 때문에 해당 프로젝트가 아닌 다른 프로젝트에서도 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;자료구조의 분류&lt;/p&gt;

&lt;p&gt;자료구조는 크게 선형 자료구조와 비선형 자료구조로 나뉩니다. 선형 자료구조의 경우 데이터가 일렬로 나열되어 있는 것을 뜻하고, 비 선형 자료구조는 특정한 형태를 띄고 있는 것을 뜻하는데, 각각에 해당하는 자료구조는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;선형구조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열(Array)&lt;/li&gt;
  &lt;li&gt;연결 리스트(Linked List)&lt;/li&gt;
  &lt;li&gt;스택(Stack)&lt;/li&gt;
  &lt;li&gt;큐(Queue)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;비선형 구조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;트리(Tree)&lt;/li&gt;
  &lt;li&gt;그래프(Graph)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출처: https://andrew0409.tistory.com/148 [코인하는 프로그래머]&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Seokhyun Myung</name>
        
        
      </author>

      

      
        <category term="Data_Structure" />
      

      
        <summary type="html">자료구조란 무엇인가(Data Structure)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">자료구조란 무엇인가</title>
      <link href="http://localhost:4000/Data_Structure-basic" rel="alternate" type="text/html" title="자료구조란 무엇인가" />
      <published>2020-08-17T00:00:00+09:00</published>
      <updated>2020-08-17T00:00:00+09:00</updated>
      <id>http://localhost:4000/Data_Structure-basic</id>
      <content type="html" xml:base="http://localhost:4000/Data_Structure-basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;자료구조 포스트 목차 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./Data_Structure-basic&quot;&gt;자료구조 (1) - Data_Structure 기본&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Data_Structure-control-statement&quot;&gt;자료구조 (2) - Data_Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자료구조란 무엇인가(Data Structure)&lt;/p&gt;

&lt;p&gt;사전적인 의미는 자료(Data)의 집합의 의미하며, 각 원소들이 논리적으로 정의된 규칙에 의해 나열되며 자료에 대한 처리를 효율적으로 수행할 수 있도록 자료를 구분하여 표현한 것&lt;/p&gt;

&lt;p&gt;자료구조의 선택 기준&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자료의 처리 시간&lt;/li&gt;
  &lt;li&gt;자료의 크기&lt;/li&gt;
  &lt;li&gt;자료의 활용 빈도&lt;/li&gt;
  &lt;li&gt;자료의 갱신 정도&lt;/li&gt;
  &lt;li&gt;프로그램의 용이성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자료의 처리를 보다 효율적으로 하기 위해서 위와 같은 사항을 고려하여 선택, 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;자료구조의 특징&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;효율성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;앞서 설명 했듯이 자료구조를 사용하는 목적은 효율적인 데이터의 관리 및 사용입니다. 따라서 적절한 자료구조를 선택하여 사용한다면 업무의 효율이 올라갈 것입니다. 한가지 예를 들어보자면 검색에 대한 알고리즘을 구현할때, 데이터의 양이 많다면 순차 검색(Linear Search)를 사용하는 것 보다 이분 검색(Binary Search)를 활용하는것이 더 효율 적일 것입니다. 왜냐하면 학생이라는 테이블에 학생에 대한 데이터가 100만개 있다고 할때, 순차 검색으로 데이터를 검색하게 되면 운이 좋을때는 1번의 연산으로 찾을 수 있겠지만, 운이 없을경우에는 100만번의연산을 거쳐야 할 것입니다. 이에 반해 이분 검색은 연산의 횟수가 훨씬 줄어들죠. 이와같이 목적에 맞는 자료구조를 사용하는것이 효율적입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;추상화&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;추상화란 복잡한 자료, 모듈, 시스템 등으로 부터 핵심적인 개념만 간추려 내는 것입니다. 자료구조를 구현할 때 중요한 것은 어느 시점에 데이터를 삽입할 것이며, 어느 시점에 이러한 데이터를 어떻게 사용할것인지에 대해서 초점을 맞출수 있기 때문에 구현 외적인 부분에 더 시간을 쏟을 수 있습니다. 알고리즘 자체에는 중점을 두지 않습니다.&lt;/p&gt;

&lt;p&gt;마찬가지로 자료구조 내부의 구현은 중요하지 않습니다. 어떻게 구현했는지 보다 어떻게 사용해야 하는지를 알고 있어야 합니다.&lt;/p&gt;

&lt;p&gt;예를들어 스택(Stack)의 경우 먼저 들어간것이 나중에 나오는 FILO(First In Last Out)의 형태를 가지고 있습니다. 그리고 push() 함수를 이용해서 데이터를 삽입할 수 있고, pop() 함수를 이용해서 데이터를 추출할 수 있습니다. 그 함수 내부 구현이 어떻게 되었는지는 중요하지 않습니다. 사람마다 다른 코드를 작성할 것이고, 사용 언어, 개발 툴등 환경적인 변수에 의해서 다른 코드가 나올 것이기 때문에 추상적인 개념에 대해서만 이해하고 있다면 사용할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;재사용성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자료구조를 설계할때 특정 프로그램에서만 동작하게 설계하지는 않습니다. 다양한 프로그램에서 동작할 수 있도록 범용성 있게 설계하기 때문에 해당 프로젝트가 아닌 다른 프로젝트에서도 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;자료구조의 분류&lt;/p&gt;

&lt;p&gt;자료구조는 크게 선형 자료구조와 비선형 자료구조로 나뉩니다. 선형 자료구조의 경우 데이터가 일렬로 나열되어 있는 것을 뜻하고, 비 선형 자료구조는 특정한 형태를 띄고 있는 것을 뜻하는데, 각각에 해당하는 자료구조는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;선형구조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열(Array)&lt;/li&gt;
  &lt;li&gt;연결 리스트(Linked List)&lt;/li&gt;
  &lt;li&gt;스택(Stack)&lt;/li&gt;
  &lt;li&gt;큐(Queue)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;비선형 구조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;트리(Tree)&lt;/li&gt;
  &lt;li&gt;그래프(Graph)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출처: https://andrew0409.tistory.com/148 [코인하는 프로그래머]&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Seokhyun Myung</name>
        
        
      </author>

      

      
        <category term="Data_Structure" />
      

      
        <summary type="html">자료구조 포스트 목차 자료구조 (1) - Data_Structure 기본 자료구조 (2) - Data_Structure</summary>
      

      
      
    </entry>
  
</feed>
